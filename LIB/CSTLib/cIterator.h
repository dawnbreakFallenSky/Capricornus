/*-----------------------------------------------------------------------------------------
**
** 版权(Copyright): Inory, 2022~
**
** 文件名(FileName): cIterator.h
**
** 描述(Description): 本文件定义迭代器(iterator)在C语言编译环境下的封装接口
**
** 设计注记(Design Annotation):
**
** 作者(Author):
**      Inory, 2022年5月22日开始编写本文件
**
** 更改历史(Modification History):
**      Inory, 2022年5月22日 创建本文件
**      $Revision$
**      $Date$
**      $Author$
**      $Log$
**
**-----------------------------------------------------------------------------------------
*/
#ifndef _C_ITERATOR_H
#define _C_ITERATOR_H

/*-----------------------------------------------------------------------------------------
**                                         Include
**-----------------------------------------------------------------------------------------
*/
#include <memory.h>
#include <malloc.h>
#include <stdio.h>

/*-----------------------------------------------------------------------------------------
**                                     Type Declaration
**-----------------------------------------------------------------------------------------
*/
/* 迭代器成员函数声明 */
typedef struct CIteratorFunc CIteratorFunc;
/* 迭代器结构体声明 */
typedef struct CIterator CIterator;

/*-----------------------------------------------------------------------------------------
**                                     Class Definition
**-----------------------------------------------------------------------------------------
*/
/* <类描述> */
/* 1)迭代器成员函数接口 */
/* 2) */
struct CIteratorFunc
{
	/* 获取当前节点的值 */
	void* (*ref)(CIterator* thiz);
	/* 迭代器指向下一个节点,返回迭代器 */
	CIterator (*inc)(CIterator* thiz);
	/* 比较两个迭代器是否相同 */
	int (*equal)(CIterator* thiz, const CIterator* val);
	/* 迭代器指向上一个节点,返回迭代器 */
	CIterator (*dec)(CIterator* thiz);
	/* 替换迭代器中数据结构的值 */
	CIterator (*assign)(CIterator* thiz, const CIterator* val);
};

/*-----------------------------------------------------------------------------------------
**                                     Class Definition
**-----------------------------------------------------------------------------------------
*/
/* <类描述> */
/* 1)迭代器接口 */
/* 2) */
struct CIterator
{
	/* 迭代器成员函数 */
	CIteratorFunc* _iterFunc;
	/* 迭代器节点 */
	void* _iterator;
};

/*-----------------------------------------------------------------------------------------
**                                     Macro Definition
**-----------------------------------------------------------------------------------------
*/
/* 获取当前节点的值 */
#define ITER_REF(X)			(X)._iterFunc->ref(&(X))
/* 迭代器指向下一个节点,返回迭代器 */
#define ITER_INC(X)			(X)._iterFunc->inc(&(X))
/* 比较两个迭代器是否相同 */
#define ITER_EQUAL(X, Y)	(X)._iterFunc->equal(&(X), &(Y))
/* 迭代器指向上一个节点,返回迭代器 */
#define ITER_DEC(X)			(X)._iterFunc->dec(&(X))
/* 替换迭代器中数据结构的值 */
#define ITER_ASSIGN(X, Y)	(X)._iterFunc->assign(&(X), &(Y))

/*-----------------------------------------------------------------------------------------
**                                     Type Definition
**-----------------------------------------------------------------------------------------
*/
/* 比较函数类型 */
typedef int (*comparer)(const void*, const void*);

#endif /* _C_ITERATOR_H */
